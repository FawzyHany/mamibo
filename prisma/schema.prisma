// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  STAFF
  ADMIN
}


model User {
  id          String        @id @default(cuid())
  email       String        @unique
  firstName   String
  lastName    String? // optional
  password    String
  role        Role     @default(USER)
  createdAt   DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  Cart        Cart[]
  Order       Order[]
  UserAddress UserAddress[]

}

model Category {
  id    String     @id @default(cuid())
  name  String     @unique
  items MenuItem[] // relation to MenuItem
}

model MenuItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  categoryId  String
  isAvailable Boolean  @default(true)
  price       Decimal?
  category    Category @relation(fields: [categoryId], references: [id])

  CartItem  CartItem[]
  OrderItem OrderItem[]
}

enum Size {
  Small
  Medium
  Large
}

model MenuItemSize {
  id         String  @id @default(cuid())
  size       Size // Small, Medium, Large
  multiplier Decimal

  CartItem  CartItem[]
  OrderItem OrderItem[]
}

enum Crust {
  Regular
  Stuffed
}

model MenuItemCrust {
  id    String  @id @default(cuid())
  crust Crust // Regular, Stuffed
  price Decimal

  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Cart {
  id        String  @id @default(cuid())
  userId    String? @unique // null if guest
  user      User?   @relation(fields: [userId], references: [id])
  sessionId String? @unique // for guests with cookies

  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id String @id @default(cuid())

  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id])

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  sizeOptionId String?
  sizeOption   MenuItemSize? @relation(fields: [sizeOptionId], references: [id])

  crustOptionId String?
  crustOption   MenuItemCrust? @relation(fields: [crustOptionId], references: [id])

  quantity  Int
  unitPrice Decimal // computed snapshot of price for one unit
  lineTotal Decimal // unitPrice * quantity

  // Snapshots
  itemNameSnapshot String
  imageUrlSnapshot String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, menuItemId, sizeOptionId, crustOptionId])
}

enum PaymentType {
  cod
  card
}

model Order {
  id     String  @id @default(cuid())
  userId String? // signed-in user, or null if guest
  user   User?   @relation(fields: [userId], references: [id])

  sessionId String? // for guest checkouts

  address   OrderAddress @relation(fields: [addressId], references: [id])
  addressId String

  items OrderItem[]

  paymentType PaymentType // "card", "cod", "paypal"
  paymentId   String? // e.g. Stripe intent ID
  paid        Boolean     @default(false)

  status OrderStatus @default(PREPARING)

  total Decimal // final total (including tax, etc.)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  itemName String // snapshot at order time
  imageUrl String?

  quantity  Int
  unitPrice Decimal // snapshot
  lineTotal Decimal // snapshot

  sizeOptionId    String?
  crustOptionId   String?
  MenuItemSize    MenuItemSize?  @relation(fields: [menuItemSizeId], references: [id])
  menuItemSizeId  String?
  MenuItemCrust   MenuItemCrust? @relation(fields: [menuItemCrustId], references: [id])
  menuItemCrustId String?
}

model OrderAddress {
  id        String  @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String
  address   String
  building  String
  floor     String?
  flat      String?
  landmark  String?
  lat       Float
  lng       Float
  Order     Order[]
}

enum OrderStatus {
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model UserAddress {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // Contact info
  firstName String
  lastName  String
  phone     String

  // Address info
  address  String
  building String?
  floor    String?
  flat     String?
  landmark String?

  // Location
  lat Float
  lng Float

  // Meta
  isDefault Boolean  @default(false) // one default address per user
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String?
  message   String
  createdAt DateTime @default(now())
}

